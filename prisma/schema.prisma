generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum MatchStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELED
}

model User {
  id          String    @id @unique
  email       String    @unique
  username    String?
  balance     Float     @default(1000.00)
  createdAt   DateTime  @default(now())
  entries     Entry[]
}

model Player {
  id            String @id @unique
  name          String
  team          String
  projections   PlayerProjection[]
  stats         PlayerMatchStat[]
}

model PlayerProjection {
  id        String    @id @default(cuid())
  playerId  String
  player    Player    @relation(fields: [playerId], references: [id])
  statType  String    // e.g., "Kills", "Headshot %"
  value     Float     // The projected value, e.g., 18.5
  matchId   String
  match     Match?    @relation(fields: [matchId], references: [id])
  createdAt DateTime  @default(now())
  picks     Pick[]

  @@unique([playerId, statType, matchId])
}

model Entry {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  wager       Float
  payout      Float
  isWin       Boolean?
  createdAt   DateTime  @default(now())
  picks       Pick[]
}

model Pick {
  id                  String            @id @default(cuid())
  entryId             String
  entry               Entry             @relation(fields: [entryId], references: [id], onDelete: Cascade)
  playerProjectionId  String
  playerProjection    PlayerProjection  @relation(fields: [playerProjectionId], references: [id])
  pickType            String            // "MORE" or "LESS"
  result              Float?
  isWin               Boolean?
}

model PlayerMatchStat {
  id         String   @id @default(cuid())
  playerId   String
  player     Player   @relation(fields: [playerId], references: [id])
  matchId    String
  match      Match?   @relation(fields: [matchId], references: [id])
  kills      Float
  createdAt  DateTime @default(now())

  @@unique([playerId, matchId])
}

model Match {
  id          String        @id @unique
  scheduledAt DateTime
  status      MatchStatus   @default(SCHEDULED)
  map         String?
  event       String?
  teamA       String?
  teamB       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projections PlayerProjection[]
  stats       PlayerMatchStat[]

  @@index([status, scheduledAt])
  @@index([scheduledAt])
}
